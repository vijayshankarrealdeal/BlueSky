# -*- coding: utf-8 -*-
"""Blue Sky Below.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OT2FtDanAYYiC260p4WFboTP4Zld0zBT

# **Forecasting Sensor Measurements in Smart Air Aquality Monitoring System**
"""

import pandas as pd
from fbprophet import Prophet
import numpy as np
import matplotlib.pyplot as plt

"""# Importing Dataset"""

df = pd.read_csv('/content/AirQuality.csv',sep = ';')

df.drop(['PT08.S1(CO)', 'NMHC(GT)', 'C6H6(GT)',
       'PT08.S2(NMHC)', 'NOx(GT)', 'PT08.S3(NOx)', 'NO2(GT)', 'PT08.S4(NO2)',
       'PT08.S5(O3)', 'RH', 'AH', 'Unnamed: 15', 'Unnamed: 16'],axis = 1,inplace = True)

df.isnull().sum()

"""Taking Out Data,Time,CO and Temperature from dataset"""

df.columns = ['Date', 'Time', 'CO', 'Temp']
df.dropna(inplace = True)

"""## Dataset Clean

* The temperature and CO contains values such as 12,3 so we replaced it by 12.3
* For -200 values we first replaced it with 0 and calculated the average of the column , and after that we fill the mean to the index where -200 were pressent.
* Then We Combined The Date Time as 2004-03-10 18:00:00


"""

df.Temp = df.Temp.apply(lambda x : float(x.replace(',','.')))
df.CO = df.CO.apply(lambda x : float(x.replace(',','.')))

t = []
for i in range(len(df)):
  date = df.iloc[i][0].split('/')
  t.append(date[-1] + '-'+date[1] + '-'+  date[0] +' '+ ':'.join(df.iloc[i][1].split('.'))) 
df['DateTime'] = t
df.drop(['Date','Time'],axis = 1,inplace = True)
df = df[['DateTime','CO','Temp']]
#val
for i in range(len(df.Temp)):
  if df.Temp[i] == -200:
    df.Temp[i] = 17.60
#np.mean(k)
#len([i for i in range(len(df.CO)) if df.CO[i] == -200]),len(df)
count = 0
for i in range(len(df.CO)):
  if df.CO[i] == -200:
     continue
  else:
    count += df.CO[i]
mean = 16520.3/(9357 - 1683)
for i in range(len(df.CO)):
  if df.CO[i] == -200:
     df.CO[i] = mean

df.head()

df_train = df.iloc[6:174,:].reset_index(drop=True)
df_test = df.iloc[174:342,:].reset_index(drop = True)

df_train

"""### Function For Calculating the prediction.
Given Below Function call the prediction on previous model.
so we donot need train model again and again, for new data,
giving a edge for performance.else if make new model for every prediction , we may get more accuracy.
"""

def stan_init(m):
    res = {}
    for pname in ['k', 'm', 'sigma_obs']:
        res[pname] = m.params[pname][0][0]
    for pname in ['delta', 'beta']:
        res[pname] = m.params[pname][0]
    return res

"""# Function To Calculate.
### MAPE
"""

def mean_absolute_percentage_error(y_true, y_pred): 
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

"""# FbProphet
For Prediction we will,the input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement temperature or co.
"""

df_train_temp = df_train[['DateTime','Temp']]
df_train_temp.columns = ["ds" ,"y"]
##############
df_test_temp = df_test[['DateTime','Temp']]
df_test_temp.columns = ["ds" ,"y"]

temp = Prophet(yearly_seasonality=True,weekly_seasonality=True)
temp.fit(df_train_temp)

future_temp = temp.make_future_dataframe(periods=24,freq = 'H',include_history = False)
forecast_temp = temp.predict(future_temp)

"""Prophet Gives many parameters as a prediction result , but we focus on yhat,yhat_lower,yhat_upper
where 
* yhat: forecast
* yhat_lower, yhat_upper: uncertainty interval
"""

M_Loss_yhat = []
M_Loss_yhat_lower = []
M_Loss_yhat_upper = []
yhat = mean_absolute_percentage_error(df_test_temp.y[:24],forecast_temp.yhat)
yhat_lower = mean_absolute_percentage_error(df_test_temp.y[:24],forecast_temp.yhat_lower)
yhat_upper = mean_absolute_percentage_error(df_test_temp.y[:24],forecast_temp.yhat_upper)
M_Loss_yhat.append(yhat)
M_Loss_yhat_lower.append(yhat_lower)
M_Loss_yhat_upper.append(yhat_upper)

M_Loss_yhat

next_batch_y = df_test_temp.y[24:]

plotX_true = []
plotX_predict = []
for i in range(0,len(df_test_temp),24):
  try:
    next_batch = df_test_temp.iloc[i:i+24,:]
    next_train = df_train_temp.append(next_batch)
    #Next Batch
    m2 = Prophet(yearly_seasonality=True,weekly_seasonality=True).fit(next_train, init=stan_init(temp))
    next_batch_future_temp = m2.make_future_dataframe(periods=24,freq = 'H',include_history = False)
    next_batch_future_temp
    next_batch_forecast_temp = m2.predict(next_batch_future_temp,)
    plotX_true.append(next_batch_y[i:i+24])
    plotX_predict.append(next_batch_forecast_temp.yhat)
    yhat_next_batch = mean_absolute_percentage_error(next_batch_y[i:i+24],next_batch_forecast_temp.yhat)
    yhat_lower_next_batch = mean_absolute_percentage_error(next_batch_y[:24],next_batch_forecast_temp.yhat_lower)
    yhat_upper_next_batch = mean_absolute_percentage_error(next_batch_y[:24],next_batch_forecast_temp.yhat_upper)
    M_Loss_yhat.append(yhat_next_batch)
    M_Loss_yhat_lower.append(yhat_lower_next_batch)
    M_Loss_yhat_upper.append(yhat_upper_next_batch)
  except:
    pass

"""## Day 18, Result From 11-17 Train Data Temperature"""

fig1 = temp.plot(forecast_temp)

fig2 = temp.plot_components(forecast_temp)

"""# Each day MAPE 
### For Temperature

"""

M_Loss_yhat

"""## Average of MAPE for the testing period (8th day to 14th day)"""

np.mean(M_Loss_yhat)

"""# CO"""

df_train_co = df_train[['DateTime','CO']]
df_train_co.columns = ["ds" ,"y"]
df_test_co = df_test[['DateTime','CO']]
df_test_co.columns = ["ds" ,"y"]

co = Prophet()
co.fit(df_train_co)

future_co = co.make_future_dataframe(periods=24,freq = 'H',include_history = False)
forecast_co = co.predict(future_co)

M_Loss_yhat = []
M_Loss_yhat_lower = []
M_Loss_yhat_upper = []
yhat = mean_absolute_percentage_error(df_test_co.y[:24],forecast_co.yhat)
yhat_lower = mean_absolute_percentage_error(df_test_co.y[:24],forecast_co.yhat_lower)
yhat_upper = mean_absolute_percentage_error(df_test_co.y[:24],forecast_co.yhat_upper)
M_Loss_yhat.append(yhat)
M_Loss_yhat_lower.append(yhat_lower)
M_Loss_yhat_upper.append(yhat_upper)

next_batch_y = df_test_co.y[24:]

plotX_true = []
plotX_predict = []
for i in range(0,len(df_test_co),24):
  try:
    next_batch = df_test_co.iloc[i:i+24,:]
    next_train = df_train_co.append(next_batch)
    #Next Batch
    m2 = Prophet().fit(next_train, init=stan_init(co))
    next_batch_future_co = m2.make_future_dataframe(periods=24,freq = 'H',include_history = False)
    next_batch_future_co
    next_batch_forecast_co = m2.predict(next_batch_future_co,)
    plotX_true.append(next_batch_y[i:i+24])
    plotX_predict.append(next_batch_forecast_co.yhat)
    yhat_next_batch = mean_absolute_percentage_error(next_batch_y[i:i+24],next_batch_forecast_co.yhat)
    yhat_lower_next_batch = mean_absolute_percentage_error(next_batch_y[:24],next_batch_forecast_co.yhat_lower)
    yhat_upper_next_batch = mean_absolute_percentage_error(next_batch_y[:24],next_batch_forecast_co.yhat_upper)
    M_Loss_yhat.append(yhat_next_batch)
    M_Loss_yhat_lower.append(yhat_lower_next_batch)
    M_Loss_yhat_upper.append(yhat_upper_next_batch)
  except:
    pass

"""# Each day MAPE 
### For CO

"""

M_Loss_yhat

"""## Average of MAPE for the testing period (8th day to 14th day)"""

np.mean(M_Loss_yhat)

"""## Day 18, Result From 11-17 Train Data CO"""

fig3 = co.plot(forecast_co)

fig4 = co.plot_components(forecast_co)